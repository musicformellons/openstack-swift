'use strict';const pkgcloud=require('pkgcloud'),promisify=require('es6-promisify'),getenv=require('getenv'),{Readable,Writable}=require('stream');class Swift{constructor(a){this._client=pkgcloud.storage.createClient({provider:getenv('OPENSTACK_SWIFT_PROVIDER'),username:getenv('OPENSTACK_SWIFT_USERNAME'),password:getenv('OPENSTACK_SWIFT_PASSWORD'),authUrl:getenv('OPENSTACK_SWIFT_AUTHURL'),region:getenv('OPENSTACK_SWIFT_REGION')}),this._container=a}static container(a){return new Swift(a)}async getAllData(){return{container:await this.getContainer(),containerFiles:await this.getContainerFiles()}}async createContainer(){try{return this._client.createContainer({name:this._container})}catch(a){return console.log(`${a.statusCode} create container errror: ${a.failCode}`),!1}}async destroyContainer(){const a=promisify(this._client.destroyContainer,this._client);try{return a(this._container)}catch(a){return console.log(`${a.statusCode} destroy container errror: ${a.failCode}`),!1}}async getContainer(){const a=promisify(this._client.getContainer,this._client);try{return a(this._container)}catch(a){return console.log(`${a.statusCode} fetch container errror: ${a.failCode}`),null}}async getContainerFiles(){const a=promisify(this._client.getFiles,this._client);try{return a(this._container)}catch(a){return console.log(`${a.statusCode} get container files errror: ${a.failCode}`),[]}}async removeContainerFiles(){const a=await this.getContainerFiles();try{for(let b of a)await this.removeFile(b)}catch(a){return console.log(`${a.statusCode} delete container errror: ${a.failCode}`),null}}async getFile(a){const b=promisify(this._client.getFile,this._client);try{return await b(this._container,a)}catch(a){return console.log(`${a.statusCode} fetching file errror: ${a.failCode}`),null}}async downloadFile(a){return console.log(`download file ${a}`),new Promise((b)=>{try{const c=new Writable;c.data='',c._write=function(a,b,c){this.data+=a.toString(),c()},this._client.download({container:this._container,remote:a,stream:c},(a)=>a?(console.log(`${a.statusCode} download file errror: ${a.failCode}`),b(null)):b(JSON.parse(c.data)))}catch(a){return console.log(`${a.statusCode} download file errror: ${a.failCode}`),b(null)}})}async uploadFile(a,b){return new Promise((c)=>{try{const d=new Readable;d.push(JSON.stringify(b)),d.push(null);const e=this._client.upload({container:this._container,remote:a});e.on('success',function(){return c(!0)}),d.pipe(e)}catch(a){return console.log(`${a.statusCode} upload file errror: ${a.failCode}`),c(!1)}})}async removeFile(a){const b=promisify(this._client.removeFile,this._client);try{return b(this._container,a)}catch(a){return console.log(`${a.statusCode} remove fil errror: ${a.failCode}`),null}}}module.exports=Swift;